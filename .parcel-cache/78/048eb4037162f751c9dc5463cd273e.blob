var helpers = require("../node_modules/@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
helpers.prelude(module);
try {
  var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
  _parcelHelpers.defineInteropFlag(exports);
  _parcelHelpers.export(exports, "TreeViz", function () {
    return TreeViz;
  });
  var _lodash = require("lodash");
  var _lodashDefault = _parcelHelpers.interopDefault(_lodash);
  var _react = require("react");
  var _reactDefault = _parcelHelpers.interopDefault(_react);
  var _jsxFileName = "/home/init/coding/resources/algorithms-exercises/src/tree-visualizer.js";
  function _extends() {
    _extends = Object.assign || (function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    });
    return _extends.apply(this, arguments);
  }
  const nodeStyle = {
    width: "50%"
  };
  const nullChildStyle = _lodashDefault.default.assign({}, nodeStyle, {});
  const treeStyle = {
    boxSizing: "border-box",
    textAlign: "center"
  };
  const childrenStyle = {
    display: "flex",
    flexWrap: "nowrap"
  };
  const diag = {
    backgroundRepeat: "no-repeat",
    backgroundPosition: "center center",
    backgroundSize: "100% 100%, auto",
    padding: "20px 0 0",
    margin: 0,
    fontSize: "12px"
  };
  const diagLeft = _lodashDefault.default.merge({
    background: "url(\"data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' version='1.1' preserveAspectRatio='none' viewBox='0 0 100 100'><path d='M100 1 L99 0 L49 49 L50 50' fill='black' /></svg>\")"
  }, diag);
  const diagRight = _lodashDefault.default.merge({
    background: "url(\"data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' version='1.1' preserveAspectRatio='none' viewBox='0 0 100 100'><path d='M1 0 L0 1 L49 50 L50 49' fill='black' /></svg>\")"
  }, diag);
  const target = document.getElementById("target");
  const findMaxDepth = node => {
    if (!node) return 0;
    const left = findMaxDepth(node.left);
    const right = findMaxDepth(node.right);
    return left > right ? left + 1 : right + 1;
  };
  class TreeViz extends _reactDefault.default.Component {
    render() {
      const maxDepth = findMaxDepth(this.props.root);
      const localTreeStyle = _lodashDefault.default.merge({
        width: `${Math.pow(2, maxDepth + 1) * 5}px`
      }, treeStyle);
      return (
        /*#__PURE__*/_reactDefault.default.createElement("div", {
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 61,
            columnNumber: 7
          }
        }, /*#__PURE__*/_reactDefault.default.createElement("h1", {
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 62,
            columnNumber: 9
          }
        }, "Max Depth: ", maxDepth), /*#__PURE__*/_reactDefault.default.createElement("div", {
          style: localTreeStyle,
          className: "tree",
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 63,
            columnNumber: 9
          }
        }, /*#__PURE__*/_reactDefault.default.createElement(NodeViz, _extends({}, this.props.root, {
          level: 1,
          isRoot: true,
          pruneLeft: true,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 64,
            columnNumber: 11
          }
        }))))
      );
    }
  }
  class NodeViz extends _reactDefault.default.Component {
    render() {
      const localNodeStyle = _lodashDefault.default.merge({}, nodeStyle, {
        width: this.props.isRoot ? "100%" : "50%"
      });
      let children;
      if (this.props.right || this.props.left) {
        let left = this.props.left ? /*#__PURE__*/_reactDefault.default.createElement(NodeViz, _extends({
          level: this.props.level + 1,
          isLeft: true,
          isRoot: false
        }, this.props.left, {
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 80,
            columnNumber: 9
          }
        })) : /*#__PURE__*/_reactDefault.default.createElement("div", {
          style: nullChildStyle,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 87,
            columnNumber: 9
          }
        });
        let right = this.props.right ? /*#__PURE__*/_reactDefault.default.createElement(NodeViz, _extends({
          level: this.props.level + 1,
          isLeft: false,
          isRoot: false
        }, this.props.right, {
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 90,
            columnNumber: 9
          }
        })) : /*#__PURE__*/_reactDefault.default.createElement("div", {
          style: nullChildStyle,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 97,
            columnNumber: 9
          }
        });
        children = /*#__PURE__*/_reactDefault.default.createElement("div", {
          style: childrenStyle,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 100,
            columnNumber: 9
          }
        }, left, right);
      }
      return (
        /*#__PURE__*/_reactDefault.default.createElement("div", {
          style: localNodeStyle,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 107,
            columnNumber: 7
          }
        }, /*#__PURE__*/_reactDefault.default.createElement("h2", {
          style: this.props.isRoot ? diag : this.props.isLeft ? diagLeft : diagRight,
          __self: this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 108,
            columnNumber: 9
          }
        }, this.props.value, this.props.height ? ` (${this.props.height})` : null), children)
      );
    }
  }
  helpers.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
